import { InjectionKey } from 'vue';
import type { BListGroupParentData } from '../../types/components';
export declare const injectionKey: InjectionKey<BListGroupParentData>;
declare const _sfc_main: import("vue").DefineComponent<{
    flush: {
        type: null;
        required: false;
        default: boolean;
    };
    horizontal: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    numbered: {
        type: null;
        required: false;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
}, {
    injectionKey: InjectionKey<BListGroupParentData>;
    props: any;
    flushBoolean: Readonly<import("vue").Ref<boolean>>;
    numberedBoolean: Readonly<import("vue").Ref<boolean>>;
    computedClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
        'list-group-flush': boolean;
        'list-group-horizontal': boolean;
        'list-group-numbered': boolean;
    }>;
    computedTag: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    flush: {
        type: null;
        required: false;
        default: boolean;
    };
    horizontal: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    numbered: {
        type: null;
        required: false;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
}>>, {
    flush: any;
    tag: string;
    horizontal: string | boolean;
    numbered: any;
}>;
export default _sfc_main;
