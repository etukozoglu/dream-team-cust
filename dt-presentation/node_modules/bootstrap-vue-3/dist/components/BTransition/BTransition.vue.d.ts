import type { TransitionMode } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    appear: {
        type: null;
        required: false;
        default: boolean;
    };
    mode: {
        type: null;
        required: false;
    };
    noFade: {
        type: null;
        required: false;
        default: boolean;
    };
    transProps: {
        type: null;
        required: false;
    };
}, {
    props: any;
    appearBoolean: Readonly<import("vue").Ref<boolean>>;
    noFadeBoolean: Readonly<import("vue").Ref<boolean>>;
    fadeProperties: import("vue").ComputedRef<{
        name: string;
        enterActiveClass: string;
        enterToClass: string;
        leaveActiveClass: string;
        leaveToClass: string;
        enterFromClass: string;
        leaveFromClass: string;
    }>;
    baseProperties: import("vue").ComputedRef<{
        name: string;
        enterActiveClass: string;
        enterToClass: string;
        leaveActiveClass: string;
        leaveToClass: string;
        enterFromClass: string;
        leaveFromClass: string;
        mode: TransitionMode | undefined;
        css: boolean;
    }>;
    computedAttrs: import("vue").ComputedRef<{
        name: string;
        enterActiveClass: string;
        enterToClass: string;
        leaveActiveClass: string;
        leaveToClass: string;
        enterFromClass: string;
        leaveFromClass: string;
        mode: TransitionMode | undefined;
        css: boolean;
    } | {
        name: string;
        type?: ("transition" | "animation") | undefined;
        css: boolean;
        duration?: number | {
            enter: number;
            leave: number;
        } | undefined;
        enterFromClass: string;
        enterActiveClass: string;
        enterToClass: string;
        appearFromClass?: string | undefined;
        appearActiveClass?: string | undefined;
        appearToClass?: string | undefined;
        leaveFromClass: string;
        leaveActiveClass: string;
        leaveToClass: string;
        mode: "default" | TransitionMode | undefined;
        appear?: boolean | undefined;
        persisted?: boolean | undefined;
        onBeforeEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onEnter?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
        onAfterEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onEnterCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onBeforeLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onLeave?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
        onAfterLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onLeaveCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onBeforeAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onAppear?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
        onAfterAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        onAppearCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    appear: {
        type: null;
        required: false;
        default: boolean;
    };
    mode: {
        type: null;
        required: false;
    };
    noFade: {
        type: null;
        required: false;
        default: boolean;
    };
    transProps: {
        type: null;
        required: false;
    };
}>>, {
    appear: any;
    noFade: any;
}>;
export default _sfc_main;
