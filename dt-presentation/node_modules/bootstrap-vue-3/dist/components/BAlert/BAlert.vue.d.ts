import type { Booleanish } from '../../types';
import { type Ref } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    dismissLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    dismissible: {
        type: null;
        required: false;
        default: boolean;
    };
    fade: {
        type: null;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: (BooleanConstructor | NumberConstructor)[];
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
    closeContent: {
        type: StringConstructor;
        required: false;
    };
    immediate: {
        type: null;
        required: false;
        default: boolean;
    };
    interval: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    showOnPause: {
        type: null;
        required: false;
        default: boolean;
    };
}, {
    props: any;
    dismissibleBoolean: Readonly<Ref<boolean>>;
    fadeBoolean: Readonly<Ref<boolean>>;
    immediateBoolean: Readonly<Ref<boolean>>;
    showOnPauseBoolean: Readonly<Ref<boolean>>;
    emit: {
        (e: 'closed'): void;
        (e: 'close-countdown', value: number): void;
        (e: 'update:modelValue', value: boolean | number): void;
    };
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    hasCloseSlot: import("vue").ComputedRef<boolean>;
    computedClasses: import("vue").ComputedRef<(string[] | {
        'alert-dismissible': boolean;
    })[]>;
    isActive: Readonly<Ref<boolean>>;
    pause: () => void;
    restart: () => void;
    resume: () => void;
    stop: () => void;
    isPaused: Readonly<Ref<boolean>>;
    remainingMs: import("vue").ComputedRef<number>;
    isAlertVisible: import("vue").ComputedRef<boolean>;
    closeClicked: () => void;
    BTransition: import("vue").DefineComponent<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        appearBoolean: Readonly<Ref<boolean>>;
        noFadeBoolean: Readonly<Ref<boolean>>;
        fadeProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
        }>;
        baseProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../../types/TransitionMode").default | undefined;
            css: boolean;
        }>;
        computedAttrs: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../../types/TransitionMode").default | undefined;
            css: boolean;
        } | {
            name: string;
            type?: ("transition" | "animation") | undefined;
            css: boolean;
            duration?: number | {
                enter: number;
                leave: number;
            } | undefined;
            enterFromClass: string;
            enterActiveClass: string;
            enterToClass: string;
            appearFromClass?: string | undefined;
            appearActiveClass?: string | undefined;
            appearToClass?: string | undefined;
            leaveFromClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            mode: "default" | import("../../types/TransitionMode").default | undefined;
            appear?: boolean | undefined;
            persisted?: boolean | undefined;
            onBeforeEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onEnter?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onEnterCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onBeforeLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onLeave?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onLeaveCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onBeforeAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onAppear?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onAppearCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: null;
            required: false;
        };
    }>>, {
        appear: any;
        noFade: any;
    }>;
    BCloseButton: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: (e: "click", value: MouseEvent) => void;
        disabledBoolean: Readonly<Ref<boolean>>;
        whiteBoolean: Readonly<Ref<boolean>>;
        computedClasses: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        type: any;
        ariaLabel: string;
        disabled: any;
        white: any;
    }>;
    BButton: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<keyof import("../../types/InputSize").BaseInputSize>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<import("../../types/ButtonType").default>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<keyof import("../../types").BaseButtonVariant>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        computedClasses: import("vue").ComputedRef<(string[] | {
            active: boolean;
            'rounded-pill': boolean;
            'rounded-0': boolean;
            disabled: boolean;
        })[]>;
        computedAttrs: import("vue").ComputedRef<{
            'aria-disabled': boolean | null;
            'aria-pressed': boolean | null;
            autocomplete: string | null;
            disabled: boolean | null;
            href: string | undefined;
            rel: string | null | undefined;
            role: string | null;
            target: import("../../types/LinkTarget").default | null;
            type: import("../../types/ButtonType").default | null;
            to: import("vue-router").RouteLocationRaw | null;
            append: Booleanish | null;
            activeClass: string | null;
            event: string | unknown[] | null;
            exact: Booleanish | null;
            exactActiveClass: string | null;
            replace: Booleanish | null;
            routerComponentName: string | null;
            routerTag: string | null;
        }>;
        computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            computedLinkClasses: import("vue").ComputedRef<{
                active: boolean;
                disabled: boolean;
            }>;
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: Readonly<Ref<boolean>>;
            appendBoolean: Readonly<Ref<boolean>>;
            disabledBoolean: Readonly<Ref<boolean>>;
            replaceBoolean: Readonly<Ref<boolean>>;
            exactBoolean: Readonly<Ref<boolean>>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            disabled: Booleanish;
            active: Booleanish;
            activeClass: string;
            append: Booleanish;
            event: string | unknown[];
            exact: Booleanish;
            exactActiveClass: string;
            rel: string;
            replace: Booleanish;
            routerComponentName: string;
            routerTag: string;
            target: import("../../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        clicked: (e: MouseEvent) => void;
        loadingBoolean: Readonly<Ref<boolean>>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<keyof import("../../types/InputSize").BaseInputSize>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<import("../../types/ButtonType").default>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<keyof import("../../types").BaseButtonVariant>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
    }, {
        type: import("../../types/ButtonType").default;
        tag: string;
        variant: keyof import("../../types").BaseButtonVariant;
        disabled: Booleanish;
        active: Booleanish;
        activeClass: string;
        append: Booleanish;
        event: string | unknown[];
        exact: Booleanish;
        exactActiveClass: string;
        rel: string;
        replace: Booleanish;
        routerComponentName: string;
        routerTag: string;
        target: import("../../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        pill: Booleanish;
        pressed: Booleanish;
        size: keyof import("../../types/InputSize").BaseInputSize;
        squared: Booleanish;
        loading: Booleanish;
        loadingMode: "fill" | "inline";
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "closed" | "close-countdown")[], "update:modelValue" | "closed" | "close-countdown", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dismissLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    dismissible: {
        type: null;
        required: false;
        default: boolean;
    };
    fade: {
        type: null;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: (BooleanConstructor | NumberConstructor)[];
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
    closeContent: {
        type: StringConstructor;
        required: false;
    };
    immediate: {
        type: null;
        required: false;
        default: boolean;
    };
    interval: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    showOnPause: {
        type: null;
        required: false;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClosed?: ((...args: any[]) => any) | undefined;
    "onClose-countdown"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number | boolean;
    dismissLabel: string;
    dismissible: any;
    fade: any;
    variant: any;
    immediate: any;
    interval: number;
    showOnPause: any;
}>;
export default _sfc_main;
