import type { Booleanish, ClassValue } from '../types';
import { BvModalEvent } from '../utils';
declare const _sfc_main: import("vue").DefineComponent<{
    bodyBgVariant: {
        type: null;
        required: false;
    };
    bodyClass: {
        type: null;
        required: false;
    };
    bodyTextVariant: {
        type: null;
        required: false;
    };
    busy: {
        type: null;
        required: false;
        default: boolean;
    };
    lazy: {
        type: null;
        required: false;
        default: boolean;
    };
    buttonSize: {
        type: null;
        required: false;
        default: string;
    };
    cancelDisabled: {
        type: null;
        required: false;
        default: boolean;
    };
    cancelTitle: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    cancelVariant: {
        type: null;
        required: false;
        default: string;
    };
    centered: {
        type: null;
        required: false;
        default: boolean;
    };
    contentClass: {
        type: null;
        required: false;
    };
    dialogClass: {
        type: null;
        required: false;
    };
    footerBgVariant: {
        type: null;
        required: false;
    };
    footerBorderVariant: {
        type: null;
        required: false;
    };
    footerClass: {
        type: null;
        required: false;
    };
    footerTextVariant: {
        type: null;
        required: false;
    };
    fullscreen: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    headerBgVariant: {
        type: null;
        required: false;
    };
    headerBorderVariant: {
        type: null;
        required: false;
    };
    headerClass: {
        type: null;
        required: false;
    };
    headerCloseLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    headerCloseWhite: {
        type: null;
        required: false;
        default: boolean;
    };
    headerTextVariant: {
        type: null;
        required: false;
    };
    hideBackdrop: {
        type: null;
        required: false;
        default: boolean;
    };
    hideFooter: {
        type: null;
        required: false;
        default: boolean;
    };
    hideHeader: {
        type: null;
        required: false;
        default: boolean;
    };
    hideHeaderClose: {
        type: null;
        required: false;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    modalClass: {
        type: null;
        required: false;
    };
    modelValue: {
        type: null;
        required: false;
        default: boolean;
    };
    noCloseOnBackdrop: {
        type: null;
        required: false;
        default: boolean;
    };
    noCloseOnEsc: {
        type: null;
        required: false;
        default: boolean;
    };
    noFade: {
        type: null;
        required: false;
        default: boolean;
    };
    noFocus: {
        type: null;
        required: false;
        default: boolean;
    };
    okDisabled: {
        type: null;
        required: false;
        default: boolean;
    };
    okOnly: {
        type: null;
        required: false;
        default: boolean;
    };
    okTitle: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    okVariant: {
        type: null;
        required: false;
        default: string;
    };
    scrollable: {
        type: null;
        required: false;
        default: boolean;
    };
    show: {
        type: null;
        required: false;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    titleClass: {
        type: StringConstructor;
        required: false;
    };
    titleSrOnly: {
        type: null;
        required: false;
        default: boolean;
    };
    titleTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    static: {
        type: null;
        required: false;
        default: boolean;
    };
}, {
    props: any;
    emit: {
        (e: 'update:modelValue', value: boolean): void;
        (e: 'show', value: BvModalEvent): void;
        (e: 'shown', value: BvModalEvent): void;
        (e: 'hide', value: BvModalEvent): void;
        (e: 'hidden', value: BvModalEvent): void;
        (e: 'hide-prevented'): void;
        (e: 'show-prevented'): void;
        (e: 'ok', value: BvModalEvent): void;
        (e: 'cancel', value: BvModalEvent): void;
        (e: 'close', value: BvModalEvent): void;
    };
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    computedId: import("vue").ComputedRef<string>;
    busyBoolean: Readonly<import("vue").Ref<boolean>>;
    lazyBoolean: Readonly<import("vue").Ref<boolean>>;
    cancelDisabledBoolean: Readonly<import("vue").Ref<boolean>>;
    centeredBoolean: Readonly<import("vue").Ref<boolean>>;
    hideBackdropBoolean: Readonly<import("vue").Ref<boolean>>;
    hideFooterBoolean: Readonly<import("vue").Ref<boolean>>;
    hideHeaderBoolean: Readonly<import("vue").Ref<boolean>>;
    hideHeaderCloseBoolean: Readonly<import("vue").Ref<boolean>>;
    modelValueBoolean: Readonly<import("vue").Ref<boolean>>;
    noCloseOnBackdropBoolean: Readonly<import("vue").Ref<boolean>>;
    noCloseOnEscBoolean: Readonly<import("vue").Ref<boolean>>;
    noFadeBoolean: Readonly<import("vue").Ref<boolean>>;
    noFocusBoolean: Readonly<import("vue").Ref<boolean>>;
    okDisabledBoolean: Readonly<import("vue").Ref<boolean>>;
    okOnlyBoolean: Readonly<import("vue").Ref<boolean>>;
    scrollableBoolean: Readonly<import("vue").Ref<boolean>>;
    titleSrOnlyBoolean: Readonly<import("vue").Ref<boolean>>;
    staticBoolean: Readonly<import("vue").Ref<boolean>>;
    isActive: import("vue").Ref<boolean>;
    element: import("vue").Ref<HTMLElement | null>;
    lazyLoadCompleted: import("vue").Ref<boolean>;
    modalClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
    hasHeaderCloseSlot: import("vue").ComputedRef<boolean>;
    modalDialogClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
    bodyClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
    headerClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
    footerClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
    titleClasses: import("vue").ComputedRef<(string | {
        "visually-hidden": boolean;
    } | undefined)[]>;
    disableCancel: import("vue").ComputedRef<boolean>;
    disableOk: import("vue").ComputedRef<boolean>;
    buildModalEvent: (type: string, opts?: Partial<BvModalEvent>) => BvModalEvent;
    hide: (trigger?: string) => void;
    show: () => void;
    onBeforeEnter: () => void;
    onAfterEnter: () => void;
    onLeave: () => void;
    onAfterLeave: () => void;
    BButton: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<keyof import("../types/InputSize").BaseInputSize>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<import("../types/ButtonType").default>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<keyof import("../types").BaseButtonVariant>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        computedClasses: import("vue").ComputedRef<(string[] | {
            active: boolean;
            'rounded-pill': boolean;
            'rounded-0': boolean;
            disabled: boolean;
        })[]>;
        computedAttrs: import("vue").ComputedRef<{
            'aria-disabled': boolean | null;
            'aria-pressed': boolean | null;
            autocomplete: string | null;
            disabled: boolean | null;
            href: string | undefined;
            rel: string | null | undefined;
            role: string | null;
            target: import("../types/LinkTarget").default | null;
            type: import("../types/ButtonType").default | null;
            to: import("vue-router").RouteLocationRaw | null;
            append: Booleanish | null;
            activeClass: string | null;
            event: string | unknown[] | null;
            exact: Booleanish | null;
            exactActiveClass: string | null;
            replace: Booleanish | null;
            routerComponentName: string | null;
            routerTag: string | null;
        }>;
        computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            computedLinkClasses: import("vue").ComputedRef<{
                active: boolean;
                disabled: boolean;
            }>;
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: Readonly<import("vue").Ref<boolean>>;
            appendBoolean: Readonly<import("vue").Ref<boolean>>;
            disabledBoolean: Readonly<import("vue").Ref<boolean>>;
            replaceBoolean: Readonly<import("vue").Ref<boolean>>;
            exactBoolean: Readonly<import("vue").Ref<boolean>>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            disabled: Booleanish;
            active: Booleanish;
            activeClass: string;
            append: Booleanish;
            event: string | unknown[];
            exact: Booleanish;
            exactActiveClass: string;
            rel: string;
            replace: Booleanish;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        clicked: (e: MouseEvent) => void;
        loadingBoolean: Readonly<import("vue").Ref<boolean>>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<keyof import("../types/InputSize").BaseInputSize>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<import("../types/ButtonType").default>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<keyof import("../types").BaseButtonVariant>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
    }, {
        type: import("../types/ButtonType").default;
        tag: string;
        variant: keyof import("../types").BaseButtonVariant;
        disabled: Booleanish;
        active: Booleanish;
        activeClass: string;
        append: Booleanish;
        event: string | unknown[];
        exact: Booleanish;
        exactActiveClass: string;
        rel: string;
        replace: Booleanish;
        routerComponentName: string;
        routerTag: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        pill: Booleanish;
        pressed: Booleanish;
        size: keyof import("../types/InputSize").BaseInputSize;
        squared: Booleanish;
        loading: Booleanish;
        loadingMode: "fill" | "inline";
    }>;
    BCloseButton: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: (e: "click", value: MouseEvent) => void;
        disabledBoolean: Readonly<import("vue").Ref<boolean>>;
        whiteBoolean: Readonly<import("vue").Ref<boolean>>;
        computedClasses: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        type: any;
        ariaLabel: string;
        disabled: any;
        white: any;
    }>;
    BTransition: import("vue").DefineComponent<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        appearBoolean: Readonly<import("vue").Ref<boolean>>;
        noFadeBoolean: Readonly<import("vue").Ref<boolean>>;
        fadeProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
        }>;
        baseProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../types/TransitionMode").default | undefined;
            css: boolean;
        }>;
        computedAttrs: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../types/TransitionMode").default | undefined;
            css: boolean;
        } | {
            name: string;
            type?: ("transition" | "animation") | undefined;
            css: boolean;
            duration?: number | {
                enter: number;
                leave: number;
            } | undefined;
            enterFromClass: string;
            enterActiveClass: string;
            enterToClass: string;
            appearFromClass?: string | undefined;
            appearActiveClass?: string | undefined;
            appearToClass?: string | undefined;
            leaveFromClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            mode: "default" | import("../types/TransitionMode").default | undefined;
            appear?: boolean | undefined;
            persisted?: boolean | undefined;
            onBeforeEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onEnter?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onEnterCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onBeforeLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onLeave?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onLeaveCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onBeforeAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onAppear?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onAppearCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: null;
            required: false;
        };
    }>>, {
        appear: any;
        noFade: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "show-prevented" | "ok" | "cancel" | "close")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden" | "close" | "hide-prevented" | "show-prevented" | "ok" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bodyBgVariant: {
        type: null;
        required: false;
    };
    bodyClass: {
        type: null;
        required: false;
    };
    bodyTextVariant: {
        type: null;
        required: false;
    };
    busy: {
        type: null;
        required: false;
        default: boolean;
    };
    lazy: {
        type: null;
        required: false;
        default: boolean;
    };
    buttonSize: {
        type: null;
        required: false;
        default: string;
    };
    cancelDisabled: {
        type: null;
        required: false;
        default: boolean;
    };
    cancelTitle: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    cancelVariant: {
        type: null;
        required: false;
        default: string;
    };
    centered: {
        type: null;
        required: false;
        default: boolean;
    };
    contentClass: {
        type: null;
        required: false;
    };
    dialogClass: {
        type: null;
        required: false;
    };
    footerBgVariant: {
        type: null;
        required: false;
    };
    footerBorderVariant: {
        type: null;
        required: false;
    };
    footerClass: {
        type: null;
        required: false;
    };
    footerTextVariant: {
        type: null;
        required: false;
    };
    fullscreen: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    headerBgVariant: {
        type: null;
        required: false;
    };
    headerBorderVariant: {
        type: null;
        required: false;
    };
    headerClass: {
        type: null;
        required: false;
    };
    headerCloseLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    headerCloseWhite: {
        type: null;
        required: false;
        default: boolean;
    };
    headerTextVariant: {
        type: null;
        required: false;
    };
    hideBackdrop: {
        type: null;
        required: false;
        default: boolean;
    };
    hideFooter: {
        type: null;
        required: false;
        default: boolean;
    };
    hideHeader: {
        type: null;
        required: false;
        default: boolean;
    };
    hideHeaderClose: {
        type: null;
        required: false;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    modalClass: {
        type: null;
        required: false;
    };
    modelValue: {
        type: null;
        required: false;
        default: boolean;
    };
    noCloseOnBackdrop: {
        type: null;
        required: false;
        default: boolean;
    };
    noCloseOnEsc: {
        type: null;
        required: false;
        default: boolean;
    };
    noFade: {
        type: null;
        required: false;
        default: boolean;
    };
    noFocus: {
        type: null;
        required: false;
        default: boolean;
    };
    okDisabled: {
        type: null;
        required: false;
        default: boolean;
    };
    okOnly: {
        type: null;
        required: false;
        default: boolean;
    };
    okTitle: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    okVariant: {
        type: null;
        required: false;
        default: string;
    };
    scrollable: {
        type: null;
        required: false;
        default: boolean;
    };
    show: {
        type: null;
        required: false;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    titleClass: {
        type: StringConstructor;
        required: false;
    };
    titleSrOnly: {
        type: null;
        required: false;
        default: boolean;
    };
    titleTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    static: {
        type: null;
        required: false;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    "onHide-prevented"?: ((...args: any[]) => any) | undefined;
    "onShow-prevented"?: ((...args: any[]) => any) | undefined;
}, {
    show: any;
    modelValue: any;
    noFade: any;
    static: any;
    titleTag: string;
    lazy: any;
    busy: any;
    buttonSize: any;
    cancelDisabled: any;
    cancelTitle: string;
    cancelVariant: any;
    centered: any;
    fullscreen: string | boolean;
    headerCloseLabel: string;
    headerCloseWhite: any;
    hideBackdrop: any;
    hideFooter: any;
    hideHeader: any;
    hideHeaderClose: any;
    noCloseOnBackdrop: any;
    noCloseOnEsc: any;
    noFocus: any;
    okDisabled: any;
    okOnly: any;
    okTitle: string;
    okVariant: any;
    scrollable: any;
    titleSrOnly: any;
}>;
export default _sfc_main;
