import type { Booleanish } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    role: {
        type: StringConstructor;
        required: false;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    floating: {
        type: null;
        required: false;
        default: boolean;
    };
    novalidate: {
        type: null;
        required: false;
        default: boolean;
    };
    validated: {
        type: null;
        required: false;
        default: boolean;
    };
}, {
    props: any;
    emit: (e: 'submit', value: Event) => void;
    computedAttrs: import("vue").ComputedRef<{
        floating: Booleanish;
        role: string | undefined;
        id: string | undefined;
        novalidate: Booleanish;
        validated: Booleanish;
    }>;
    submitted: (e: Event) => void;
    BForm: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: null;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: null;
            required: false;
            default: boolean;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        floatingBoolean: Readonly<import("vue").Ref<boolean>>;
        novalidateBoolean: Readonly<import("vue").Ref<boolean>>;
        validatedBoolean: Readonly<import("vue").Ref<boolean>>;
        emit: (e: "submit", value: Event) => void;
        computedClasses: import("vue").ComputedRef<{
            'form-floating': boolean;
            'was-validated': boolean;
        }>;
        submitted: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: null;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: null;
            required: false;
            default: boolean;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
    }>> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
    }, {
        floating: any;
        novalidate: any;
        validated: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    role: {
        type: StringConstructor;
        required: false;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    floating: {
        type: null;
        required: false;
        default: boolean;
    };
    novalidate: {
        type: null;
        required: false;
        default: boolean;
    };
    validated: {
        type: null;
        required: false;
        default: boolean;
    };
}>> & {
    onSubmit?: ((...args: any[]) => any) | undefined;
}, {
    floating: any;
    novalidate: any;
    validated: any;
}>;
export default _sfc_main;
