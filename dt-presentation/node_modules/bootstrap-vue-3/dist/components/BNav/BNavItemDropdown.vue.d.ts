import type { ClassValue } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    toggleClass: {
        type: null;
        required: false;
    };
    size: {
        type: null;
        required: false;
    };
    offset: {
        type: StringConstructor;
        required: false;
    };
    autoClose: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    dropleft: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    dropright: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    dropup: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    right: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    left: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    splitVariant: {
        type: null;
        required: false;
    };
    noCaret: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}, {
    props: any;
    BDropdown: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        menuClass: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        splitClass: {
            type: null;
            required: false;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: null;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        boundary: {
            type: null;
            required: false;
            default: string;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        isNav: {
            type: null;
            required: false;
            default: boolean;
        };
        dropup: {
            type: null;
            required: false;
            default: boolean;
        };
        dropright: {
            type: null;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: null;
            required: false;
            default: boolean;
        };
        noFlip: {
            type: null;
            required: false;
            default: boolean;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        popperOpts: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        split: {
            type: null;
            required: false;
            default: boolean;
        };
        splitButtonType: {
            type: null;
            required: false;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        noCaret: {
            type: null;
            required: false;
            default: boolean;
        };
        toggleText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: {
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
            (e: "click", event: MouseEvent): void;
            (e: "toggle"): void;
        };
        computedId: import("vue").ComputedRef<string>;
        blockBoolean: Readonly<import("vue").Ref<boolean>>;
        darkBoolean: Readonly<import("vue").Ref<boolean>>;
        dropupBoolean: Readonly<import("vue").Ref<boolean>>;
        droprightBoolean: Readonly<import("vue").Ref<boolean>>;
        isNavBoolean: Readonly<import("vue").Ref<boolean>>;
        dropleftBoolean: Readonly<import("vue").Ref<boolean>>;
        rightBoolean: Readonly<import("vue").Ref<boolean>>;
        splitBoolean: Readonly<import("vue").Ref<boolean>>;
        noCaretBoolean: Readonly<import("vue").Ref<boolean>>;
        parent: import("vue").Ref<HTMLElement | undefined>;
        dropdown: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/dropdown").default | undefined>;
        computedClasses: import("vue").ComputedRef<{
            'd-grid': boolean;
            'd-flex': boolean;
        }>;
        buttonClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
        dropdownMenuClasses: import("vue").ComputedRef<(ClassValue | undefined)[]>;
        buttonAttr: import("vue").ComputedRef<{
            'data-bs-toggle': string | undefined;
            'aria-expanded': boolean | undefined;
            ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | undefined> | undefined;
            href: string | undefined;
        }>;
        splitAttr: import("vue").ComputedRef<{
            ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | undefined> | undefined;
        }>;
        hide: () => void;
        onSplitClick: (event: MouseEvent) => void;
        BButton: import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            rel: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: import("vue").PropType<keyof import("../../types/InputSize").BaseInputSize>;
                default: string;
            };
            squared: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../../types/ButtonType").default>;
                default: string;
            };
            variant: {
                type: import("vue").PropType<keyof import("../../types").BaseButtonVariant>;
                default: string;
            };
            loading: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            loadingMode: {
                type: import("vue").PropType<"fill" | "inline">;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            computedClasses: import("vue").ComputedRef<(string[] | {
                active: boolean;
                'rounded-pill': boolean;
                'rounded-0': boolean;
                disabled: boolean;
            })[]>;
            computedAttrs: import("vue").ComputedRef<{
                'aria-disabled': boolean | null;
                'aria-pressed': boolean | null;
                autocomplete: string | null;
                disabled: boolean | null;
                href: string | undefined;
                rel: string | null | undefined;
                role: string | null;
                target: import("../../types/LinkTarget").default | null;
                type: import("../../types/ButtonType").default | null;
                to: import("vue-router").RouteLocationRaw | null;
                append: import("../../types/Booleanish").default | null;
                activeClass: string | null;
                event: string | unknown[] | null;
                exact: import("../../types/Booleanish").default | null;
                exactActiveClass: string | null;
                replace: import("../../types/Booleanish").default | null;
                routerComponentName: string | null;
                routerTag: string | null;
            }>;
            computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
                active: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }, {
                computedLinkClasses: import("vue").ComputedRef<{
                    active: boolean;
                    disabled: boolean;
                }>;
                tag: import("vue").ComputedRef<string>;
                routerAttr: import("vue").ComputedRef<{
                    to: import("vue-router").RouteLocationRaw;
                    href: string;
                    target: import("../../types/LinkTarget").default;
                    rel: string | null;
                    tabindex: unknown;
                    'aria-disabled': string | null;
                }>;
                link: import("vue").Ref<HTMLElement>;
                clicked: (e: MouseEvent) => void;
                activeBoolean: Readonly<import("vue").Ref<boolean>>;
                appendBoolean: Readonly<import("vue").Ref<boolean>>;
                disabledBoolean: Readonly<import("vue").Ref<boolean>>;
                replaceBoolean: Readonly<import("vue").Ref<boolean>>;
                exactBoolean: Readonly<import("vue").Ref<boolean>>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                active: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
            }, {
                disabled: import("../../types/Booleanish").default;
                active: import("../../types/Booleanish").default;
                activeClass: string;
                append: import("../../types/Booleanish").default;
                event: string | unknown[];
                exact: import("../../types/Booleanish").default;
                exactActiveClass: string;
                rel: string;
                replace: import("../../types/Booleanish").default;
                routerComponentName: string;
                routerTag: string;
                target: import("../../types/LinkTarget").default;
                to: import("vue-router").RouteLocationRaw;
            }>>;
            clicked: (e: MouseEvent) => void;
            loadingBoolean: Readonly<import("vue").Ref<boolean>>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            rel: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: import("vue").PropType<keyof import("../../types/InputSize").BaseInputSize>;
                default: string;
            };
            squared: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../../types/ButtonType").default>;
                default: string;
            };
            variant: {
                type: import("vue").PropType<keyof import("../../types").BaseButtonVariant>;
                default: string;
            };
            loading: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            loadingMode: {
                type: import("vue").PropType<"fill" | "inline">;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: import("vue").PropType<import("../../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
        }, {
            type: import("../../types/ButtonType").default;
            tag: string;
            variant: keyof import("../../types").BaseButtonVariant;
            disabled: import("../../types/Booleanish").default;
            active: import("../../types/Booleanish").default;
            activeClass: string;
            append: import("../../types/Booleanish").default;
            event: string | unknown[];
            exact: import("../../types/Booleanish").default;
            exactActiveClass: string;
            rel: string;
            replace: import("../../types/Booleanish").default;
            routerComponentName: string;
            routerTag: string;
            target: import("../../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
            pill: import("../../types/Booleanish").default;
            pressed: import("../../types/Booleanish").default;
            size: keyof import("../../types/InputSize").BaseInputSize;
            squared: import("../../types/Booleanish").default;
            loading: import("../../types/Booleanish").default;
            loadingMode: "fill" | "inline";
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "toggle" | "click")[], "show" | "shown" | "hide" | "hidden" | "toggle" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        menuClass: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        splitClass: {
            type: null;
            required: false;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: null;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        boundary: {
            type: null;
            required: false;
            default: string;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        isNav: {
            type: null;
            required: false;
            default: boolean;
        };
        dropup: {
            type: null;
            required: false;
            default: boolean;
        };
        dropright: {
            type: null;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: null;
            required: false;
            default: boolean;
        };
        noFlip: {
            type: null;
            required: false;
            default: boolean;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        popperOpts: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        split: {
            type: null;
            required: false;
            default: boolean;
        };
        splitButtonType: {
            type: null;
            required: false;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        noCaret: {
            type: null;
            required: false;
            default: boolean;
        };
        toggleText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onToggle?: ((...args: any[]) => any) | undefined;
    }, {
        isNav: any;
        variant: any;
        dark: any;
        disabled: any;
        split: any;
        role: string;
        right: any;
        block: any;
        offset: string | number;
        autoClose: string | boolean;
        boundary: any;
        dropup: any;
        dropright: any;
        dropleft: any;
        noFlip: any;
        popperOpts: Record<string, any>;
        splitButtonType: any;
        splitHref: string;
        noCaret: any;
        toggleText: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    toggleClass: {
        type: null;
        required: false;
    };
    size: {
        type: null;
        required: false;
    };
    offset: {
        type: StringConstructor;
        required: false;
    };
    autoClose: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    dropleft: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    dropright: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    dropup: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    right: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    left: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    splitVariant: {
        type: null;
        required: false;
    };
    noCaret: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}>>, {
    variant: any;
    dark: boolean;
    split: boolean;
    left: string | boolean;
    right: boolean;
    autoClose: string | boolean;
    dropup: boolean;
    dropright: boolean;
    dropleft: boolean;
    noCaret: boolean;
}>;
export default _sfc_main;
