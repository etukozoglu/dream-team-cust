import type { BCarouselParentData } from '../../types/components';
declare const _sfc_main: import("vue").DefineComponent<{
    imgSrc: {
        type: StringConstructor;
        required: false;
    };
    imgHeight: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    imgWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    interval: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    active: {
        type: null;
        required: false;
        default: boolean;
    };
    background: {
        type: StringConstructor;
        required: false;
    };
    caption: {
        type: StringConstructor;
        required: false;
    };
    captionHtml: {
        type: StringConstructor;
        required: false;
    };
    captionTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    contentTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    contentVisibleUp: {
        type: StringConstructor;
        required: false;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    imgAlt: {
        type: StringConstructor;
        required: false;
    };
    imgBlank: {
        type: null;
        required: false;
        default: boolean;
    };
    imgBlankColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    textHtml: {
        type: StringConstructor;
        required: false;
    };
    textTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
}, {
    props: any;
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    parentData: BCarouselParentData;
    activeBoolean: Readonly<import("vue").Ref<boolean>>;
    hasDefaultSlot: import("vue").ComputedRef<boolean>;
    computedAttr: import("vue").ComputedRef<{
        background: string;
    }>;
    computedContentClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
        'd-none': boolean;
    }>;
    parentWidth: import("vue").ComputedRef<string | undefined>;
    parentHeight: import("vue").ComputedRef<string | undefined>;
    BImg: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
        };
        blank: {
            type: null;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        center: {
            type: null;
            required: false;
            default: boolean;
        };
        fluid: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        fluidGrow: {
            type: null;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: null;
            required: false;
            default: boolean;
        };
        start: {
            type: null;
            required: false;
            default: boolean;
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        thumbnail: {
            type: null;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }, {
        props: any;
        emit: (e: "load", value: Event) => void;
        BLANK_TEMPLATE: string;
        lazyBoolean: Readonly<import("vue").Ref<boolean>>;
        blankBoolean: Readonly<import("vue").Ref<boolean>>;
        blockBoolean: Readonly<import("vue").Ref<boolean>>;
        centerBoolean: Readonly<import("vue").Ref<boolean>>;
        fluidBoolean: Readonly<import("vue").Ref<boolean>>;
        fluidGrowBoolean: Readonly<import("vue").Ref<boolean>>;
        leftBoolean: Readonly<import("vue").Ref<boolean>>;
        startBoolean: Readonly<import("vue").Ref<boolean>>;
        rightBoolean: Readonly<import("vue").Ref<boolean>>;
        endBoolean: Readonly<import("vue").Ref<boolean>>;
        thumbnailBoolean: Readonly<import("vue").Ref<boolean>>;
        computedSrcset: import("vue").ComputedRef<string | undefined>;
        computedSizes: import("vue").ComputedRef<string | undefined>;
        computedDimentions: import("vue").ComputedRef<{
            height: number | undefined;
            width: number | undefined;
        }>;
        computedBlankImgSrc: import("vue").ComputedRef<string>;
        computedAttrs: import("vue").ComputedRef<{
            src: string | undefined;
            alt: string | undefined;
            width: number | undefined;
            height: number | undefined;
            srcset: string | undefined;
            sizes: string | undefined;
            loading: string;
        }>;
        alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
        computedClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'img-thumbnail': boolean;
            'img-fluid': boolean;
            'w-100': boolean;
            rounded: boolean;
            'd-block': boolean;
        }>;
        makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
        };
        blank: {
            type: null;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        center: {
            type: null;
            required: false;
            default: boolean;
        };
        fluid: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        fluidGrow: {
            type: null;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: null;
            required: false;
            default: boolean;
        };
        start: {
            type: null;
            required: false;
            default: boolean;
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        thumbnail: {
            type: null;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }>> & {
        onLoad?: ((...args: any[]) => any) | undefined;
    }, {
        rounded: string | boolean;
        left: any;
        right: any;
        center: any;
        end: any;
        start: any;
        block: any;
        blank: any;
        blankColor: string;
        lazy: any;
        fluid: any;
        fluidGrow: any;
        thumbnail: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    imgSrc: {
        type: StringConstructor;
        required: false;
    };
    imgHeight: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    imgWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    interval: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    active: {
        type: null;
        required: false;
        default: boolean;
    };
    background: {
        type: StringConstructor;
        required: false;
    };
    caption: {
        type: StringConstructor;
        required: false;
    };
    captionHtml: {
        type: StringConstructor;
        required: false;
    };
    captionTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    contentTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    contentVisibleUp: {
        type: StringConstructor;
        required: false;
    };
    id: {
        type: StringConstructor;
        required: false;
    };
    imgAlt: {
        type: StringConstructor;
        required: false;
    };
    imgBlank: {
        type: null;
        required: false;
        default: boolean;
    };
    imgBlankColor: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    textHtml: {
        type: StringConstructor;
        required: false;
    };
    textTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
}>>, {
    active: any;
    captionTag: string;
    contentTag: string;
    imgBlank: any;
    imgBlankColor: string;
    textTag: string;
}>;
export default _sfc_main;
