import { type PropType } from 'vue';
import type { Alignment, Booleanish } from '../types';
declare const _sfc_main: import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    gutterX: {
        type: StringConstructor;
        default: null;
    };
    gutterY: {
        type: StringConstructor;
        default: null;
    };
    noGutters: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    alignV: {
        type: PropType<Alignment.Vertical>;
        default: null;
    };
    alignH: {
        type: PropType<Alignment.JustifyContent>;
        default: null;
    };
    alignContent: {
        type: PropType<Alignment.Content>;
        default: null;
    };
}, {
    computedClasses: import("vue").ComputedRef<(string[] | {
        [x: string]: boolean;
        'g-0': boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    gutterX: {
        type: StringConstructor;
        default: null;
    };
    gutterY: {
        type: StringConstructor;
        default: null;
    };
    noGutters: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    alignV: {
        type: PropType<Alignment.Vertical>;
        default: null;
    };
    alignH: {
        type: PropType<Alignment.JustifyContent>;
        default: null;
    };
    alignContent: {
        type: PropType<Alignment.Content>;
        default: null;
    };
}>>, {
    tag: string;
    alignContent: Alignment.Content;
    gutterX: string;
    gutterY: string;
    noGutters: Booleanish;
    alignV: Alignment.Vertical;
    alignH: Alignment.JustifyContent;
}>;
export default _sfc_main;
