import { type ComponentPublicInstance, type PropType } from 'vue';
import type { BPopoverDelayObject } from '../types/components';
import type { Booleanish } from '../types';
declare const _sfc_main: import("vue").DefineComponent<{
    container: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>>;
        default: string;
    };
    content: {
        type: StringConstructor;
    };
    id: {
        type: StringConstructor;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    noninteractive: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    placement: {
        type: PropType<import("bootstrap/js/dist/tooltip").default.PopoverPlacement | (() => import("bootstrap/js/dist/tooltip").default.PopoverPlacement)>;
        default: string;
    };
    target: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | undefined>;
        default: undefined;
    };
    title: {
        type: StringConstructor;
    };
    delay: {
        type: PropType<number | BPopoverDelayObject>;
        default: number;
    };
    triggers: {
        type: PropType<"click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
        default: string;
    };
    show: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    variant: {
        type: PropType<keyof import("../types").BaseColorVariant>;
        default: undefined;
    };
    html: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    sanitize: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    offset: {
        type: PropType<string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction>;
        default: string;
    };
}, {
    element: import("vue").Ref<HTMLElement | undefined>;
    titleRef: import("vue").Ref<HTMLElement | undefined>;
    contentRef: import("vue").Ref<HTMLElement | undefined>;
    computedClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "inserted")[], "show" | "shown" | "hide" | "hidden" | "inserted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    container: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>>;
        default: string;
    };
    content: {
        type: StringConstructor;
    };
    id: {
        type: StringConstructor;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    noninteractive: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    placement: {
        type: PropType<import("bootstrap/js/dist/tooltip").default.PopoverPlacement | (() => import("bootstrap/js/dist/tooltip").default.PopoverPlacement)>;
        default: string;
    };
    target: {
        type: PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | undefined>;
        default: undefined;
    };
    title: {
        type: StringConstructor;
    };
    delay: {
        type: PropType<number | BPopoverDelayObject>;
        default: number;
    };
    triggers: {
        type: PropType<"click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
        default: string;
    };
    show: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    variant: {
        type: PropType<keyof import("../types").BaseColorVariant>;
        default: undefined;
    };
    html: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    sanitize: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    offset: {
        type: PropType<string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction>;
        default: string;
    };
}>> & {
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onInserted?: ((...args: any[]) => any) | undefined;
}, {
    show: Booleanish;
    variant: keyof import("../types").BaseColorVariant;
    target: string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | undefined;
    offset: string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction;
    html: Booleanish;
    container: string | HTMLElement | ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}>;
    placement: import("bootstrap/js/dist/tooltip").default.PopoverPlacement | (() => import("bootstrap/js/dist/tooltip").default.PopoverPlacement);
    delay: number | BPopoverDelayObject;
    customClass: string;
    sanitize: Booleanish;
    noninteractive: Booleanish;
    triggers: "click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus";
}>;
export default _sfc_main;
