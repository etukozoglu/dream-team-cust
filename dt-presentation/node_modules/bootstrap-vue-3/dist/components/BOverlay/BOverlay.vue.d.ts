import type { SpinnerType } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    bgColor: {
        type: StringConstructor;
        required: false;
    };
    blur: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    fixed: {
        type: null;
        required: false;
        default: boolean;
    };
    noCenter: {
        type: null;
        required: false;
        default: boolean;
    };
    noFade: {
        type: null;
        required: false;
        default: boolean;
    };
    noWrap: {
        type: null;
        required: false;
        default: boolean;
    };
    opacity: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    overlayTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    show: {
        type: null;
        required: false;
        default: boolean;
    };
    spinnerSmall: {
        type: null;
        required: false;
        default: boolean;
    };
    spinnerType: {
        type: null;
        required: false;
        default: string;
    };
    spinnerVariant: {
        type: null;
        required: false;
    };
    variant: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    wrapTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
}, {
    props: any;
    emit: {
        (e: 'click', value: MouseEvent): void;
        (e: 'hidden'): void;
        (e: 'shown'): void;
    };
    positionStyles: {
        top: number;
        left: number;
        bottom: number;
        right: number;
    };
    fixedBoolean: Readonly<import("vue").Ref<boolean>>;
    noCenterBoolean: Readonly<import("vue").Ref<boolean>>;
    noWrapBoolean: Readonly<import("vue").Ref<boolean>>;
    showBoolean: Readonly<import("vue").Ref<boolean>>;
    spinnerSmallBoolean: Readonly<import("vue").Ref<boolean>>;
    computedRounded: import("vue").ComputedRef<string>;
    computedVariant: import("vue").ComputedRef<string>;
    computedAriaBusy: import("vue").ComputedRef<"true" | null>;
    spinnerAttrs: import("vue").ComputedRef<{
        type: SpinnerType;
        variant: keyof import("../../types").BaseColorVariant | undefined;
        small: boolean;
    }>;
    overlayStyles: import("vue").ComputedRef<{
        zIndex: string | number;
        top: number;
        left: number;
        bottom: number;
        right: number;
    }>;
    overlayClasses: import("vue").ComputedRef<(string | {
        'position-absolute': boolean;
        'position-fixed': boolean;
    })[]>;
    blurClasses: import("vue").ComputedRef<string[]>;
    blurStyles: import("vue").ComputedRef<{
        opacity: string | number;
        backgroundColor: string | undefined;
        backdropFilter: string | undefined;
        top: number;
        left: number;
        bottom: number;
        right: number;
    }>;
    spinWrapperStyles: import("vue").ComputedRef<{
        top: number;
        left: number;
        bottom: number;
        right: number;
    } | {
        top: string;
        left: string;
        transform: string;
    }>;
    BTransition: import("vue").DefineComponent<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        appearBoolean: Readonly<import("vue").Ref<boolean>>;
        noFadeBoolean: Readonly<import("vue").Ref<boolean>>;
        fadeProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
        }>;
        baseProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../../types/TransitionMode").default | undefined;
            css: boolean;
        }>;
        computedAttrs: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../../types/TransitionMode").default | undefined;
            css: boolean;
        } | {
            name: string;
            type?: ("transition" | "animation") | undefined;
            css: boolean;
            duration?: number | {
                enter: number;
                leave: number;
            } | undefined;
            enterFromClass: string;
            enterActiveClass: string;
            enterToClass: string;
            appearFromClass?: string | undefined;
            appearActiveClass?: string | undefined;
            appearToClass?: string | undefined;
            leaveFromClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            mode: "default" | import("../../types/TransitionMode").default | undefined;
            appear?: boolean | undefined;
            persisted?: boolean | undefined;
            onBeforeEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onEnter?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterEnter?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onEnterCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onBeforeLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onLeave?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterLeave?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onLeaveCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onBeforeAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onAppear?: (((el: Element, done: () => void) => void) | ((el: Element, done: () => void) => void)[]) | undefined;
            onAfterAppear?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
            onAppearCancelled?: (((el: Element) => void) | ((el: Element) => void)[]) | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: null;
            required: false;
        };
    }>>, {
        appear: any;
        noFade: any;
    }>;
    BSpinner: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        smallBoolean: Readonly<import("vue").Ref<boolean>>;
        computedClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'spinner-border': boolean;
            'spinner-border-sm': boolean;
            'spinner-grow': boolean;
            'spinner-grow-sm': boolean;
        }>;
        hasLabelSlot: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        type: any;
        tag: string;
        small: any;
        role: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("shown" | "hidden" | "click")[], "shown" | "hidden" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bgColor: {
        type: StringConstructor;
        required: false;
    };
    blur: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    fixed: {
        type: null;
        required: false;
        default: boolean;
    };
    noCenter: {
        type: null;
        required: false;
        default: boolean;
    };
    noFade: {
        type: null;
        required: false;
        default: boolean;
    };
    noWrap: {
        type: null;
        required: false;
        default: boolean;
    };
    opacity: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    overlayTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    show: {
        type: null;
        required: false;
        default: boolean;
    };
    spinnerSmall: {
        type: null;
        required: false;
        default: boolean;
    };
    spinnerType: {
        type: null;
        required: false;
        default: string;
    };
    spinnerVariant: {
        type: null;
        required: false;
    };
    variant: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    wrapTag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    zIndex: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
}>> & {
    onShown?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    show: any;
    variant: string;
    noFade: any;
    fixed: any;
    rounded: string | boolean;
    opacity: string | number;
    zIndex: string | number;
    noWrap: any;
    blur: string;
    noCenter: any;
    overlayTag: string;
    spinnerSmall: any;
    spinnerType: any;
    wrapTag: string;
}>;
export default _sfc_main;
