import type { PlaceholderAnimation, PlaceholderSize } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    rows: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    columns: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    cellWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    size: {
        type: null;
        required: false;
    };
    animation: {
        type: null;
        required: false;
    };
    variant: {
        type: null;
        required: false;
    };
    headerColumns: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    hideHeader: {
        type: null;
        required: false;
        default: boolean;
    };
    headerCellWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    headerSize: {
        type: null;
        required: false;
    };
    headerAnimation: {
        type: null;
        required: false;
    };
    headerVariant: {
        type: null;
        required: false;
    };
    footerColumns: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    showFooter: {
        type: null;
        required: false;
        default: boolean;
    };
    footerCellWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    footerSize: {
        type: null;
        required: false;
    };
    footerAnimation: {
        type: null;
        required: false;
    };
    footerVariant: {
        type: null;
        required: false;
    };
}, {
    props: any;
    columnsNumber: import("vue").ComputedRef<number>;
    rowsNumber: import("vue").ComputedRef<number>;
    computedHeaderColumnsLength: import("vue").ComputedRef<number>;
    computedFooterColumnsLength: import("vue").ComputedRef<number>;
    placeholderAttrs: import("vue").ComputedRef<{
        size: PlaceholderSize | undefined;
        variant: keyof import("../../types").BaseColorVariant | undefined;
        animation: PlaceholderAnimation | undefined;
        width: string | number;
    }>;
    headerAttrs: import("vue").ComputedRef<{
        size: PlaceholderSize | undefined;
        variant: keyof import("../../types").BaseColorVariant | undefined;
        animation: PlaceholderAnimation | undefined;
        width: string | number;
    }>;
    footerAttrs: import("vue").ComputedRef<{
        size: PlaceholderSize | undefined;
        variant: keyof import("../../types").BaseColorVariant | undefined;
        animation: PlaceholderAnimation | undefined;
        width: string | number;
    }>;
    hideHeaderBoolean: Readonly<import("vue").Ref<boolean>>;
    showFooterBoolean: Readonly<import("vue").Ref<boolean>>;
    BTableSimple: import("vue").DefineComponent<{
        bordered: {
            type: null;
            required: false;
            default: boolean;
        };
        borderless: {
            type: null;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        captionTop: {
            type: null;
            required: false;
            default: boolean;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        hover: {
            type: null;
            required: false;
            default: boolean;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        stacked: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tableClass: {
            type: null;
            required: false;
        };
        tableVariant: {
            type: null;
            required: false;
        };
        stickyHeader: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        captionTopBoolean: Readonly<import("vue").Ref<boolean>>;
        borderlessBoolean: Readonly<import("vue").Ref<boolean>>;
        borderedBoolean: Readonly<import("vue").Ref<boolean>>;
        darkBoolean: Readonly<import("vue").Ref<boolean>>;
        hoverBoolean: Readonly<import("vue").Ref<boolean>>;
        smallBoolean: Readonly<import("vue").Ref<boolean>>;
        stripedBoolean: Readonly<import("vue").Ref<boolean>>;
        stickyHeaderBoolean: Readonly<import("vue").Ref<boolean>>;
        computedClasses: import("vue").ComputedRef<(import("../../types/ClassValue").default | undefined)[]>;
        responsiveClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'table-responsive': boolean;
            'b-table-sticky-header': boolean;
        }[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bordered: {
            type: null;
            required: false;
            default: boolean;
        };
        borderless: {
            type: null;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        captionTop: {
            type: null;
            required: false;
            default: boolean;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        hover: {
            type: null;
            required: false;
            default: boolean;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        stacked: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tableClass: {
            type: null;
            required: false;
        };
        tableVariant: {
            type: null;
            required: false;
        };
        stickyHeader: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        dark: any;
        small: any;
        stacked: string | boolean;
        bordered: any;
        borderless: any;
        captionTop: any;
        hover: any;
        responsive: string | boolean;
        striped: any;
        stickyHeader: any;
    }>;
    BPlaceholder: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        widthString: import("vue").ComputedRef<string | undefined>;
        colsString: import("vue").ComputedRef<string | undefined>;
        computedClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
        computedStyle: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    rows: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    columns: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    cellWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    size: {
        type: null;
        required: false;
    };
    animation: {
        type: null;
        required: false;
    };
    variant: {
        type: null;
        required: false;
    };
    headerColumns: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    hideHeader: {
        type: null;
        required: false;
        default: boolean;
    };
    headerCellWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    headerSize: {
        type: null;
        required: false;
    };
    headerAnimation: {
        type: null;
        required: false;
    };
    headerVariant: {
        type: null;
        required: false;
    };
    footerColumns: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    showFooter: {
        type: null;
        required: false;
        default: boolean;
    };
    footerCellWidth: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    footerSize: {
        type: null;
        required: false;
    };
    footerAnimation: {
        type: null;
        required: false;
    };
    footerVariant: {
        type: null;
        required: false;
    };
}>>, {
    columns: string | number;
    rows: string | number;
    hideHeader: any;
    cellWidth: string | number;
    headerCellWidth: string | number;
    showFooter: any;
    footerCellWidth: string | number;
}>;
export default _sfc_main;
