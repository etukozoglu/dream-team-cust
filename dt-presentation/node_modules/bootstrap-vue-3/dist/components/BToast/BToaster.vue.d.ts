declare const _sfc_main: import("vue").DefineComponent<{
    position: {
        type: null;
        required: false;
        default: string;
    };
    instance: {
        type: null;
        required: false;
    };
}, {
    props: any;
    toastPositions: {
        'top-left': string;
        'top-center': string;
        'top-right': string;
        'middle-left': string;
        'middle-center': string;
        'middle-right': string;
        'bottom-left': string;
        'bottom-center': string;
        'bottom-right': string;
    };
    positionClass: import("vue").ComputedRef<string>;
    handleDestroy: (id: string) => void;
    BToast: import("vue").DefineComponent<{
        delay: {
            type: NumberConstructor;
            default: number;
        };
        bodyClass: {
            type: StringConstructor;
        };
        body: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined>;
        };
        headerClass: {
            type: StringConstructor;
        };
        headerTag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        isStatus: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        autoHide: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        noCloseButton: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        noFade: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        noHoverPause: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        solid: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        static: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        title: {
            type: StringConstructor;
        };
        modelValue: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        toastClass: {
            type: import("vue").PropType<string[]>;
        };
        variant: {
            type: import("vue").PropType<keyof import("../../types").BaseColorVariant>;
        };
        active: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "destroyed")[], "update:modelValue" | "destroyed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        delay: {
            type: NumberConstructor;
            default: number;
        };
        bodyClass: {
            type: StringConstructor;
        };
        body: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined>;
        };
        headerClass: {
            type: StringConstructor;
        };
        headerTag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        isStatus: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        autoHide: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        noCloseButton: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        noFade: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        noHoverPause: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        solid: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        static: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        title: {
            type: StringConstructor;
        };
        modelValue: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        toastClass: {
            type: import("vue").PropType<string[]>;
        };
        variant: {
            type: import("vue").PropType<keyof import("../../types").BaseColorVariant>;
        };
        active: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: import("vue").PropType<import("../../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onDestroyed?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: import("../../types/Booleanish").default;
        noFade: import("../../types/Booleanish").default;
        animation: import("../../types/Booleanish").default;
        disabled: import("../../types/Booleanish").default;
        active: import("../../types/Booleanish").default;
        activeClass: string;
        append: import("../../types/Booleanish").default;
        event: string | unknown[];
        exact: import("../../types/Booleanish").default;
        exactActiveClass: string;
        rel: string;
        replace: import("../../types/Booleanish").default;
        routerComponentName: string;
        routerTag: string;
        target: import("../../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        solid: import("../../types/Booleanish").default;
        static: import("../../types/Booleanish").default;
        headerTag: string;
        delay: number;
        isStatus: import("../../types/Booleanish").default;
        autoHide: import("../../types/Booleanish").default;
        noCloseButton: import("../../types/Booleanish").default;
        noHoverPause: import("../../types/Booleanish").default;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    position: {
        type: null;
        required: false;
        default: string;
    };
    instance: {
        type: null;
        required: false;
    };
}>>, {
    position: any;
}>;
export default _sfc_main;
