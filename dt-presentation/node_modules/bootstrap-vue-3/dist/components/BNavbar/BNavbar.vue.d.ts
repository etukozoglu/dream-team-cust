declare const _sfc_main: import("vue").DefineComponent<{
    fixed: {
        type: StringConstructor;
        required: false;
    };
    print: {
        type: null;
        required: false;
        default: boolean;
    };
    sticky: {
        type: StringConstructor;
        required: false;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    toggleable: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    dark: {
        type: null;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
    };
    container: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: string;
    };
}, {
    props: any;
    printBoolean: Readonly<import("vue").Ref<boolean>>;
    darkBoolean: Readonly<import("vue").Ref<boolean>>;
    computedRole: import("vue").ComputedRef<"navigation" | undefined>;
    computedNavbarExpand: import("vue").ComputedRef<string | undefined>;
    containerClass: import("vue").ComputedRef<"container-fluid" | "container">;
    computedClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
        'd-print': boolean;
        'navbar-dark': boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    fixed: {
        type: StringConstructor;
        required: false;
    };
    print: {
        type: null;
        required: false;
        default: boolean;
    };
    sticky: {
        type: StringConstructor;
        required: false;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    toggleable: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    dark: {
        type: null;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
    };
    container: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: string;
    };
}>>, {
    tag: string;
    dark: any;
    print: any;
    toggleable: string | boolean;
    container: string | boolean;
}>;
export default _sfc_main;
