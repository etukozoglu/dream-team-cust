import { BvnComponentProps } from './ComponentProps';
import type * as Components from '../components';
import type * as Directives from '../directives';
import type * as Composables from '../composables/exports';
export type ComponentType = keyof typeof Components;
export type DirectiveType = keyof typeof Directives;
export type ComposableType = keyof typeof Composables;
export declare const ComponentNames: readonly ("BContainer" | "BFormFile" | "BAccordion" | "BAccordionItem" | "BAlert" | "BAvatar" | "BAvatarGroup" | "BBadge" | "BBreadcrumb" | "BBreadcrumbItem" | "BButton" | "BButtonGroup" | "BButtonToolbar" | "BCard" | "BCardBody" | "BCardFooter" | "BCardGroup" | "BCardHeader" | "BCardImg" | "BCardSubtitle" | "BCardText" | "BCardTitle" | "BCarousel" | "BCarouselSlide" | "BCloseButton" | "BCol" | "BCollapse" | "BDropdown" | "BDropdownDivider" | "BDropdownForm" | "BDropdownGroup" | "BDropdownHeader" | "BDropdownItem" | "BDropdownItemButton" | "BDropdownText" | "BForm" | "BFormCheckbox" | "BFormCheckboxGroup" | "BFormDatalist" | "BFormFloatingLabel" | "BFormGroup" | "BFormInput" | "BFormInvalidFeedback" | "BFormRadio" | "BFormRadioGroup" | "BFormRow" | "BFormSelect" | "BFormSelectOption" | "BFormSelectOptionGroup" | "BFormText" | "BFormTextarea" | "BFormTag" | "BFormTags" | "BFormSpinbutton" | "BFormValidFeedback" | "BImg" | "BInput" | "BInputGroup" | "BInputGroupText" | "BLink" | "BListGroup" | "BListGroupItem" | "BModal" | "BModalOrchestrator" | "BNav" | "BNavForm" | "BNavText" | "BNavbar" | "BNavbarBrand" | "BNavbarNav" | "BNavbarToggle" | "BNavItem" | "BNavItemDropdown" | "BOffcanvas" | "BOverlay" | "BPagination" | "BPlaceholder" | "BPlaceholderButton" | "BPlaceholderCard" | "BPlaceholderTable" | "BPlaceholderWrapper" | "BPopover" | "BProgress" | "BProgressBar" | "BRow" | "BSpinner" | "BTab" | "BTable" | "BTableSimple" | "BTbody" | "BTd" | "BTfoot" | "BTh" | "BThead" | "BTr" | "BToast" | "BToastOrchestrator" | "BTooltip" | "BTabs" | "BTransition" | "BTableLite")[];
export declare const DirectiveNames: readonly ("vBToggle" | "vBColorMode" | "vBModal" | "vBPopover" | "vBScrollspy" | "vBTooltip")[];
export declare const ComposableNames: readonly ("useBreadcrumb" | "useColorMode" | "useModal" | "useModalController" | "useScrollspy" | "useToast")[];
export type ConfigurationOption<T extends string> = Partial<Record<T, boolean>> & {
    all: boolean;
};
export interface BootstrapVueOptions {
    /**
     * @default true
     */
    breadcrumb?: boolean;
    /**
     * @default true
     */
    id?: boolean
    /**
     * This function is allows users to provide a custom id generator
     * as a workaround for the lack of stable SSR IDs in Vue 3.x
     *
     * This lets the Nuxt module swap in the Nuxt `useId` function
     * which is stable across SSR and client.
     *
     * @default undefined
     */
     | {
        getId?: () => string;
    };
    /**
     * @default true
     */
    modalController?: boolean;
    /**
     * @default true
     */
    modalManager?: boolean;
    /**
     * @default true
     */
    rtl?: boolean | {
        /**
         * @default false
         */
        rtlInitial: boolean;
        /**
         * @default undefined
         */
        localeInitial: string | undefined;
    };
    /**
     * @default true
     */
    toast?: boolean;
    components?: Partial<BvnComponentProps & {
        /**
         * @hint Globally sets all props with the matching name
         */
        global: Record<string, any>;
    }>;
}
