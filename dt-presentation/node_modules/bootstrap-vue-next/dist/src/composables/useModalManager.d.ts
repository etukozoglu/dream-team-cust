import { ComponentInternalInstance, Ref } from 'vue';

export declare const useSharedModalStack: () => {
    dispose: (modal: Readonly<ComponentInternalInstance>) => void;
    stack?: import('vue').ComputedRef<ComponentInternalInstance[]> | undefined;
    countStack?: import('vue').ComputedRef<number> | undefined;
    lastStack?: import('vue').ComputedRef<ComponentInternalInstance | undefined> | undefined;
    pushStack?: ((modal: Readonly<ComponentInternalInstance>) => void) | undefined;
    removeStack?: ((modal: Readonly<ComponentInternalInstance>) => void) | undefined;
    registry?: import('vue').ComputedRef<ComponentInternalInstance[]> | undefined;
    pushRegistry?: ((modal: Readonly<ComponentInternalInstance>) => void) | undefined;
    removeRegistry?: ((modal: Readonly<ComponentInternalInstance>) => void) | undefined;
};
declare const _default: (modalOpen: Readonly<Ref<boolean>>, initialValue: boolean) => {
    activePosition: import('vue').ComputedRef<number | undefined>;
    activeModalCount: import('vue').ComputedRef<number> | undefined;
    stackWithoutSelf: import('vue').ComputedRef<ComponentInternalInstance[]>;
};
export default _default;
